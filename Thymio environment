
import cv2
import numpy
from blc_network import BlcArrayTCP4Server
import dbus
import dbus.mainloop.glib
from gi.repository import GLib
from gi.repository import GObject
import sys
import time
from optparse import OptionParser

proxSensorsVal=[0,0,0,0,0]

#the communication part
vid = cv2.VideoCapture(0)
height = int(vid.get(cv2.CAP_PROP_FRAME_HEIGHT))
width = int(vid.get(cv2.CAP_PROP_FRAME_WIDTH))
deep=1 # 1 if it is in gray

print(height,"x", width)

server_image=BlcArrayTCP4Server("31440", 'UIN8', 'RGB3', [height, width])
print("server_camera connected")
server_commands=BlcArrayTCP4Server("31441", 'UIN8', 'TEXT', [3])
print("server_commands connected")
server_image.wait_connection()
server_commands.wait_connection()


#We create an numpy array (equivalent to cv:Mat in C++ ) associated with the data of server
server_array = numpy.ndarray([height, width], dtype=numpy.uint8, buffer=server_image.data, offset=0, strides=None, order='C')

while(True):
    ret, img = vid.read()
    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
     #we copy the pixels of the image to the array of the server (i.e. the buffer: server.data)
    numpy.copyto(server_array, gray)
    server_image.send_data()
    server_commands.recv_data()

    #cv2.imshow('server', server_array)
    #cv2.waitKey(1) #the thymio part to move thymio in any direction
    print("waiting for inputs for thymio")

    

def dbusReply():
    pass

def dbusError(e):
    print ('error %s')
    print (str(e))

def Braitenberg():
    #get the values of the sensors
    network.GetVariable("thymio-II", "prox.horizontal",reply_handler=get_variables_reply,error_handler=get_variables_error)
 
    #print the proximity sensors value in the terminal
    print (proxSensorsVal[0],proxSensorsVal[1],proxSensorsVal[2],proxSensorsVal[3],proxSensorsVal[4])
 
    #send motor value to the robot
    #network.SetVariable("thymio-II", "motor.left.target", [-100])
    #network.SendEventName('SetColor', [32,0,32], reply_handler = dbusReply ,error_handler=dbusError)

for i in range(5):    
    char=server_commands.data[:]
    print(char[:])
    if char == 'w':
       network.SendEventName('event1', [32,0,32,0,32,0,32,0], reply_handler = dbusReply ,error_handler=dbusError)
    if char == 'w':
       network.SetVariable("thymio-II", "motor.left.target", [300])
       network.SetVariable("thymio-II", "motor.right.target", [300])
       time.sleep(1) 
       network.SetVariable("thymio-II", "motor.left.target", [0])
       network.SetVariable("thymio-II", "motor.right.target", [0])
    if char == 's':
       network.SetVariable("thymio-II", "motor.left.target", [-300])
       network.SetVariable("thymio-II", "motor.right.target", [-300])
       time.sleep(1) 
       network.SetVariable("thymio-II", "motor.left.target", [0])
       network.SetVariable("thymio-II", "motor.right.target", [0])
    if char == 'a':
       network.SetVariable("thymio-II", "motor.left.target", [-300])
       network.SetVariable("thymio-II", "motor.right.target", [300])
       time.sleep(0.2) 
       network.SetVariable("thymio-II", "motor.left.target", [0])
       network.SetVariable("thymio-II", "motor.right.target", [0])
    if char == 'd':
       network.SetVariable("thymio-II", "motor.left.target", [300])
       network.SetVariable("thymio-II", "motor.right.target", [-300])
       time.sleep(0.2) 
       network.SetVariable("thymio-II", "motor.left.target", [0])
       network.SetVariable("thymio-II", "motor.right.target", [0])
    return True
    print('you passed the for loop')
    time.sleep(0.2)
 
def get_variables_reply(r):
    global proxSensorsVal
    proxSensorsVal=r
 
def get_variables_error(e):
    print ('error:')
    print (str(e))
    loop.quit()
 
if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option("-s", "--system", action="store_true", dest="system", default=False,help="use the system bus instead of the session bus")
 
    (options, args) = parser.parse_args()
 
    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
 
    if options.system:
        bus = dbus.SystemBus()
    else:
        bus = dbus.SessionBus()
 
    #Create Aseba network 
    network = dbus.Interface(bus.get_object('ch.epfl.mobots.Aseba', '/'), dbus_interface='ch.epfl.mobots.AsebaNetwork')
 
    #print in the terminal the name of each Aseba NOde
    print (network.GetNodesList())  
    #GObject loop
    #print 'starting loop'
    loop = GObject.MainLoop()
    #call the callback of Braitenberg algorithm
    handle = GObject.timeout_add (100, Braitenberg) #every 0.1 sec
    loop.run()
    
    
# part for receiving characters    
